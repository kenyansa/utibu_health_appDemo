// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Patient {
  id          Int   @id @default(autoincrement())
  username    String
  password    String
  email       String  @unique
  phone       String
  address     String
  orders      Order[]
  statements  Statement[]
  payments    Payment[]
}

model Medication {
  id                      Int      @id @default(autoincrement())
  name                    String
  description             String?
  quantity                Int
  priceInShillings        Float
  filePath                String
  imagePath               String
  orders                  Order[]
  isAvailableForPurchase  Boolean   @default(true)
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
}

model Order {
  id             Int       @id @default(autoincrement())
  patient        Patient   @relation(fields: [patientId], references: [id], onDelete: Cascade)
  patientId      Int
  quantity       Int
  orderStatus    String
  pricePaidInShillings Int
  paymentStatus  Boolean
  payments       Payment[]
  medications    Medication[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Statement {
  id                Int       @id @default(autoincrement())
  patient           Patient   @relation(fields: [patientId], references: [id])
  patientId         Int
  transactionType   String    // Could be 'online order' or 'face-to-face sale'
  transactionId     Int       // Assuming this is the ID of the order or sales receipt
  transactionAmount Float    
  dateTime          DateTime  @default(now())
}



model Payment {
  id                Int      @id @default(autoincrement())
  patient           Patient  @relation(fields: [patientId], references: [id])
  patientId         Int
  order             Order    @relation(fields: [orderId], references: [id])
  orderId           Int
  transactionAmount Float
  paymentMethod     String   //e.g. cash, credit card, M-pesa
  paymentStatus     String   // Could be 'pending' or 'completed'
  paymentDateTime   DateTime @default(now())
}

model LegacyDatabaseIntegration {
  id            Int      @id @default(autoincrement())
  timestamp     DateTime @default(now())
  status        String   // Could be 'success' or 'failure'
  errorMessage  String?  // Optional field for storing error messages
}

